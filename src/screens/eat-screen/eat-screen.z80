INCLUDE "hardware.inc"
INCLUDE "src/labels/hram.z80"
INCLUDE "src/labels/vector_labels.z80"
INCLUDE "src/labels/states.z80"
include "src/core/sfx_enum.z80"
include "src/screens/eat-screen/anim-enum.z80"
include "src/screens/eat-screen/eat-screen-consts.z80"

SECTION "EatScreenLogic", ROM0

INIT_EAT_SCREEN::
    di
    
        call initWaitVBlank
        xor a ; ld a, 0 ; We only need to reset a value with bit 7 reset, but 0 does the job
        ld [rLCDC], a ; disables LCD display
    
;--------------------------load Background Tiles ---------------------
    .copyTiles
        ld de, EndBgTiles - BgTiles ; size of tiles
        ld bc, BgTiles
        ld hl, $9000 ; vram
        
        call memcpy; 
    
    .copyTileMap ; 
        ld hl, $9800 ; move to top left of tile map
        ld b, $14 ;; width of screen in hex
        ld c, $12 ; height of screen in hex
        ld de, BgTileMap
        call smallTileMapCopy
    
        ; register a is still zero
        ; initialize flags to zero
        ld [hVBlankWaitFlag], a
    
        ; Set BG scroll to 0 ,0 
        ld [rSCX], a
        ld [rSCY], a



;----------------------Sprites -------------------    
    .initEatScreenSprites
    ld hl, $8000  ; dest address in vram

    ; ld bc, BlankTile
    ; ld de, 16
    ; call memcpy

    ld bc, lightGreyTile
    ld de, 16
    call memcpy

    ld bc, TimerSprites
    ld de, EndTimerSprites - TimerSprites
    call memcpy
    ld bc, HotdogSprites 
    ld de, EndHotdogSprites - HotdogSprites
    call memcpy

    ld bc, HandsReachingSprites
    ld de, EndHandsReachingSprites - HandsReachingSprites
    call memcpy

    ld bc, HandsIdleSprites + 16
    ld de, EndHandsIdleSprites  - (HandsIdleSprites +16)
    call memcpy

    ld bc, EatScreenAccents + 16
    ld de, EndEatScreenAccents - (EatScreenAccents +16)
    call memcpy


    ; ld a, %11111111
    ; ld [eat_screen_idle_draw_flags], a
   
;----------------------Init Vars ------------------------------------
    xor a
    ld [wHotDogState],a
    ld [wActionAnimationTimer],a
    ld [wLeftDogRespawnTimer],a
    ld [wRightDogRespawnTimer],a
    ld [wPlayerActions], a
    ld [wLeftDogHealth],a
    ld [wRightDogHealth],a
    ld [wHotDogsEatenCount],a
    ld [wHotDogPerfectTimingWindow],a
    ld [eat_anticipation_frame_timer],a
    ld [wEatingAlternatingBonus], a
    ld [wAlternatingFlag],a
    ld [wEatingMashBonus],a
    ld [wCriticalTimerFreeze],a
    
    call INIT_MAIN_TIMER
    ;.initPlayer
     ;//   call initPlayerObject
    
;----------------------- Screen Reinitialization  ---------------------------
    .initScreen
        ; Init BG pallete
        ld a, %11100100
        ld [rBGP], a
    
        ; Set Sprite pallete
        ld a, %11100100 ; black, dark grey, light, transparent
        ld [rOBP0],a
        ld a, %11100010 ; black, dark grey, white, transparent
        ld [rOBP1],a
    
           ; Turn screen on, sprites/objects on, 8x16 sprites (?),  display background
        ;TODO ---- TEMP DISABLE SPRITES
        ld a, %10000011
        ;ld a, %10000001
        ld [rLCDC], a
    
        ; Update player sprite location
        ;call drawPlayerSprite
    
        ; set bgm
        ld a, $0
        ld b, a
        call INIT_MUSIC
    
    ; set system state to gameplay
        ld a, SYSSTATE_EATING_SCREEN
        ld [hSystemState],a

    ei
    ret




;---------------------------------START  GAMEPLAY LOOP--------------------------------------------
EAT_SCREEN_LOOP::

   ;DEBUG PLS REMOVE 
;    ld a, %00001111
;     ld [wHotDogState], a


    ; rolling this to check that the loop is working correctly
    ld hl, $c200
    ld a, [hl]
    inc a
    ld [hl], a
    
    call .resetAlternatingFlag ;; reset this before we check the loop
    ;check inputs, jump this section if actionanim timer is not zero
    ld a, [wActionAnimationTimer]
    cp a, 0
    jp nz, .input_call_2

.input_call_1
    call .check_dog_inputs ; check inputs 
jp .endInputChecks
.input_call_2
    call .check_mash_inputs
.endInputChecks
   


.decPerfectTimer
    ld a, [wHotDogPerfectTimingWindow]
    cp a, 0
    jp z, .EndDecPerfect
    dec a
    ld [wHotDogPerfectTimingWindow],a
.EndDecPerfect
   
; Decrement all active timers
    ld a, [wCriticalTimerFreeze]
    cp a , 0
    jp z, .tickTimer
    dec a
    ld [wCriticalTimerFreeze], a
    jp .dec_active_anim_timer

.tickTimer
    call tickMainTimer
    
    ;;dec a 
    ; ld [wcrittimer], a ; or whatbver


.dec_active_anim_timer
    ld a , [wActionAnimationTimer]
    cp a, 0
    jp z, .clear_anim
    dec a
    ld [wActionAnimationTimer],a
 jr .dec_left_dog_respawn_timer 
.clear_anim
    ld a, EATANIM_NONE
    ld [wPlayerActions], a  ;; blank player anims if anim timer is zero
.dec_left_dog_respawn_timer
    ld a , [wLeftDogRespawnTimer]
    cp a, 0
    jp z, .dec_right_dog_respawn_timer
    dec a
    ld [wLeftDogRespawnTimer],a
    ld b,a
.dec_right_dog_respawn_timer
    ld a , [wRightDogRespawnTimer]
    cp a, 0
    jp z, .end_timers
    dec a
    ld [wRightDogRespawnTimer],a
    ld c,a
.end_timers

;respawn hotdogs
.respawn_missing_dogs
    ld a, [wHotDogState]
    ld b, a
    ;TODO - add skip if dog already exists
    ; bit 1, b ;; if timer is zero, and the dog state is zero
    ; jp nz, .
.left_dog_timer_handler
    ld a, [wLeftDogRespawnTimer]
    cp a, 0
    jp z, .resp_left ;; if lefttimer = zero, do resp left 
    jr .right_dog_timer_handler
.resp_left
    set 1, b ; this bit is now appropriate
.right_dog_timer_handler 
    bit 0, b
    jr nz, .set_eat_screen_draw_flags
    ld a, [wRightDogRespawnTimer]
    cp a, 0
    jp nz, .set_eat_screen_draw_flags
    set 0, b
    
.set_eat_screen_draw_flags ; B contains the updated hot dog state
ld a,b
ld [wHotDogState], a

;  end if we are mid animation

.handleHoldAnim
ld a, [wPlayerActions]
cp a, 0
jr nz, .handleDraw
;else check if holding dogs then set the appropriate enum
ld a, [wHotDogState]
and a, %00001100
cp a, %00001100
jr z, .markHoldBoth
cp a, %00001000
jr z, .markHoldLeft
cp a, %00000100
jr z, .markHoldRight

jr .handleDraw

.markHoldLeft
ld a, EATANIM_HOLD_LEFT
ld [wPlayerActions],a
jp .handleDraw

.markHoldRight
ld a, EATANIM_HOLD_RIGHT
ld [wPlayerActions],a
jp .handleDraw

.markHoldBoth
ld a, EATANIM_HOLD_BOTH
ld [wPlayerActions],a
jp .handleDraw



; ----------------------DRAW SECTION ------------------------
jp .markHoldBoth
.handleDraw
    call drawMain
.end_eat_main_loop
jp EndMainGameLoop
;------------------------------------END GAMEPLAY LOOP---------------------------------------------



;-----------------   Input handlers    -----------
.check_dog_inputs
    ;LEFT
.left_check
    ldh a, [hJoypadPressed]
    bit 5, a
    jr z, .right_check
    ; ---- button pressed ---
    ld a, CONST_ReachTimeFrames
    ld [wActionAnimationTimer], a
    ld a, CONST_DogRespawnFrames
    ld [wLeftDogRespawnTimer], a
    
    ld a, EATANIM_LEFT_REACH
    ld [wPlayerActions], a

    ;play reach sfx
    ld b, SFX_REACH
    call PLAY_SFX

    ;set player direction
    ld a, [wHotDogState]
    set 4, a
    ld [wHotDogState],a

    ;set perfect window
    ld a, CONST_PerfectWindow
    ld [wHotDogPerfectTimingWindow], a

    ; is dog there?
    ld a , [wHotDogState]
    bit 1, a 
    jp z, .inputCheckEnd

    set 3, a
    res 1, a ;remove plate dog
    ld [wHotDogState],a

    ld a, CONST_BaseHotDogHealth
    ld [wLeftDogHealth],a

    ;reset consecutive bonus
    ld a, 0
    ld [wEatingAlternatingBonus], a

    jp .inputCheckEnd
;   END 


;RIGHT
.right_check
    ldh a, [hJoypadPressed]
    bit 4, a
    jp z, .b_button_check
    
    ld a, CONST_ReachTimeFrames
    ld [wActionAnimationTimer], a
    ld a, CONST_DogRespawnFrames
    ld [wRightDogRespawnTimer], a
    

    ld a, EATANIM_RIGHT_REACH
    ld [wPlayerActions], a

    ;play reach sfx
    ld b, SFX_REACH
    call PLAY_SFX

    ;set player direction
    ld a, [wHotDogState]
    res 4, a
    ld [wHotDogState],a

    ;set perfect window
    ld a, CONST_PerfectWindow
    ld [wHotDogPerfectTimingWindow], a

    ; check if dog eists 
    ld a, [wHotDogState]
    bit 0 ,a 
    jp z, .inputCheckEnd

    set 2,a
    res 0, a
    ld [wHotDogState],a

    ld a, CONST_BaseHotDogHealth
    ld [wRightDogHealth],a


    ;reset consecutive bonus
    ld a, 0
    ld [wEatingAlternatingBonus], a

    jp .inputCheckEnd
    ;call nz, moveSpriteRight


.b_button_check
    ldh a, [hJoypadPressed]
    bit 1, a
    jp z, .a_button_check
     ; ---- button pressed ---
    call .biteLeft
    jp .inputCheckEnd

.a_button_check
    ldh a, [hJoypadPressed]
    bit 0, a
    jp z, .inputCheckEnd
     ; ---- button pressed ---
     call .biteRight
    jp .inputCheckEnd


.inputCheckEnd
ret



.biteLeft
    ld a, CONST_EatAnticipationFrames
    ld [eat_anticipation_frame_timer],a
    ;check if alternating
    ld a, [wHotDogState]
    bit 4, a
    call z, .setAlternatingFlag
    ;set direction 
    ld a, [wHotDogState]
    set 4, a
    ld [wHotDogState],a
    ;check whiffed 
    ld a, [wHotDogState]
    bit 3, a
    jp z , .whiffBiteLeft

.checkPerfectBiteLeft
    ld a, [wHotDogPerfectTimingWindow]
    cp a, 0
    jp z, .standardBiteLeft
    ; boom critical
    ld a, CONST_CriticalBiteTimeFrames
    ld [wActionAnimationTimer], a
    ld a , EATANIM_PERFECT_LEFT
    ld [wPlayerActions], a
    ld a, CONST_CriticalTimerFreeze
    ld [wCriticalTimerFreeze], a
    ld b, SFX_PERFECT_BITE
    call PLAY_SFX
    jp .finishLeftDog

.standardBiteLeft
    ld a, CONST_BiteTimeFrames
    ld [wActionAnimationTimer], a
    ld a, EATANIM_EAT_LEFT
    ld [wPlayerActions], a
   
    ld b, SFX_BITE
    call PLAY_SFX

    ld a, [wLeftDogHealth]
    call .getDamage ; stores damage in b 
    sub a, b
    jp c , .finishLeftDog
    jp z , .finishLeftDog
    ld [wLeftDogHealth] , a 
ret

.finishLeftDog
   ld a , [wHotDogState]
   res 3, a
   ld [wHotDogState],a
   xor a
   ld [wLeftDogHealth], a
   ld a , [wHotDogsEatenCount]
   inc a
   ld [wHotDogsEatenCount] , a
ret;

.whiffBiteLeft
    ld a, CONST_WhiffedBiteTimeFrames
    ld [wActionAnimationTimer], a
    ld a, EATANIM_WHIFF_LEFT
    ld [wPlayerActions], a

    ;reset consecutive bonus
    ld a, 0
    ld [wEatingAlternatingBonus], a
ret;


.biteRight  
    ld a, CONST_EatAnticipationFrames
    ld [eat_anticipation_frame_timer],a
    ;check if alternating
    ld a, [wHotDogState]
    bit 4, a
    call nz, .setAlternatingFlag
    ;set direction
    ld a, [wHotDogState]
    res 4, a
    ld [wHotDogState],a
    ; check whiffed
    ld a, [wHotDogState]
    bit 2, a
    jp z, .whiffBiteRight

.checkPerfectBiteRight
    ld a, [wHotDogPerfectTimingWindow]
    cp a, 0
    jp z, .standardBiteRight
    ; boom critical
    ld a, CONST_CriticalBiteTimeFrames
    ld [wActionAnimationTimer], a
    ld a, CONST_CriticalTimerFreeze
    ld [wCriticalTimerFreeze], a
    ld a , EATANIM_PERFECT_RIGHT
    ld [wPlayerActions], a
    ; critical sfx 
    ld b, SFX_PERFECT_BITE
    call PLAY_SFX

    jp .finishRightDog

    ; normal bite anim
.standardBiteRight
    ld a, CONST_BiteTimeFrames
    ld [wActionAnimationTimer], a
    ld a, EATANIM_EAT_RIGHT
    ld [wPlayerActions], a
     
    ld b, SFX_BITE
    call PLAY_SFX

    ;damage
    ld a, [wRightDogHealth]
    call .getDamage ;; store damage in b
    sub a, b
    jp c , .finishRightDog
    jp z , .finishRightDog
    ld [wRightDogHealth] , a 
ret
.whiffBiteRight
    ld a, CONST_WhiffedBiteTimeFrames
    ld [wActionAnimationTimer], a
    ld a, EATANIM_WHIFF_RIGHT
    ld [wPlayerActions], a\
    ;reset consecutive bonus
    ld a, 0
    ld [wEatingAlternatingBonus], a
ret;


.finishRightDog
   ld a , [wHotDogState]
   res 2, a
   ld [wHotDogState],a
   xor a
   ld [wRightDogHealth], a
   ld a , [wHotDogsEatenCount]
   inc a
   ld [wHotDogsEatenCount] , a
ret;


.getDamage  ;; This must store the damage value to be subtracted in B
    push af
    ld a, [wAlternatingFlag]
    cp a, 0
    jp nz, .incAlternatingBonus
jp .calcGetDamage


.incAlternatingBonus
    ld a, [wEatingAlternatingBonus]
    add a, CONST_alternatingBonusInc
    ld [wEatingAlternatingBonus],a 

.calcGetDamage
    ld b, CONST_BaseDamage
    ld a, [wEatingAlternatingBonus]
    add a, b
    ld b, a

    ld a, [wEatingMashBonus]
    add a, b
    ld b, a

pop af
ret

.setAlternatingFlag
    push af
    ld a, $ff
    ld [wAlternatingFlag], a
    pop af
ret

.resetAlternatingFlag
    push af
    ld a, $00
    ld [wAlternatingFlag], a
    pop af
ret

;----------MASH input handlers --------------

.check_mash_inputs
    ldh a, [hJoypadPressed]
    cp a, 0
    ret z

    ld a, [wEatingMashBonus]
    add a, CONST_mashBonusInc
    ld b, CONST_MashBonusMax
    cp a, b ; if  b < a, c flag set
    jp nc, .limitMashBonus

.addToMashBonus
    ld [wEatingMashBonus], a
ret 

.limitMashBonus
    ld a, CONST_MashBonusMax
    ld [wEatingMashBonus], a
ret
; --------------------------------

SECTION "EatScreenVars", wramx  [$d0a0]

wHotDogState::
    db ; 
    ;  --------------------FLAGS --------------------------------    
    ;       ??? |     PRevious direction  1= left, 0 =R     |     left dog hold  |  right dog hold  |  left dog shown |  right dog shown
    ;-------------------------------------------------------------
    ; bits    7- 5|         4                               |           3        |       2           |       1        |      0
 

wPlayerActions::
    db ; use as INT / enum
    ; 0 - none
    ; 1 - left arm reach
    ; 2 = right arm reach
    


wActionAnimationTimer::
    db
wLeftDogRespawnTimer::
    db
wRightDogRespawnTimer::
    db
wLeftDogHealth::
    db
wRightDogHealth::
    db
wHotDogsEatenCount::
    db
;; TODO -- add these things to add variety to the eating portion of the game
wHotDogPerfectTimingWindow::
    db
wEatingAlternatingBonus::
    db
wAlternatingFlag::
    db
wEatingMashBonus::
    db
wEatingCriticalHitRoll::
    db
wCriticalTimerFreeze::
    db


section "EatScreenSpriteData", rom0

;; ----------------Sprite GFX --------------------------
BlankTile::
    DS 16, $00
lightGreyTile::
    db $ff, $00, $ff, $00,$ff, $00, $ff, $00, $ff, $00,  $ff, $00,  $ff, $00, $ff, $00
TimerSprites::
    INCBIN "gfx/ticker-clock-sprites.bin"
EndTimerSprites::
    
HotdogSprites::
    INCBIN "gfx/hotdogs.bin"
EndHotdogSprites::
    
HandsIdleSprites::
    INCBIN "gfx/hands.bin"
EndHandsIdleSprites::
    
HandsReachingSprites::
    INCBIN "gfx/hand-reaching.bin"
EndHandsReachingSprites::

EatScreenAccents::
    incbin "gfx/eat-screen-accent-sprites.bin"
EndEatScreenAccents::

; -------- PLATE NOTES    ---------
 ; We can use a different variable to hide the hot dogs on a specific side every 4 seconds or whatever.
 ; wHotDogState represents if it is currently on spawn cooldown.
 ; to add a timer to periodically hide we can add another variable and 'bitwise and' them. 
 ;or the dog can be removed programatically as long as the respawn timer is set, since if the respawn timer the existing state will not be respected



;  These little functions might be useful later if we want to hide / show the dogs to make it more difficult
; .add_both_dogs_to_state
;     ld a, %00000011
;     ld [wHotDogState], a
;     ld [eat_screen_idle_draw_flags], a
;     jr .handleDraw
   
; .flip_hotdog_state
;     ld a, [wHotDogState]
;     cpl ; complement A register, same as   ;xor a, $ff with like one less cycle
;         ;; this might need to be changed later, in order to filter out only the last 2 bits. 
;         ;for now since neither field is using any other bits and they match, who cares.
;     ld [wHotDogState], a
;     ld [eat_screen_idle_draw_flags], a
;     xor a
;     ld [hl],a ; reset timer