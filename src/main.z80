INCLUDE "hardware.inc"
INCLUDE "src/labels/hram.z80"
INCLUDE "src/labels/wram.z80"
INCLUDE "src/labels/vector_labels.z80"
INCLUDE "src/labels/states.z80"

INCLUDE "gfx/tileset_1.z80"


SECTION "Header", ROM0[$100]
EntryPoint: ;
    jp Start ;  
REPT $150 - $104
    db 0
ENDR



  ; I left this undefined and it placed it in a where the first byte was getting overwritten after boot?
section "BinGfx", ROM0 [$0f00] 
BgTiles::
INCBIN "gfx/test_gb.bin"
EndBgTiles::

BgTileMap::
INCBIN "gfx/test_gb.map.bin"
EndBgTileMap::

TitleBgTiles::
INCBIN "gfx/title.bin"
EndTitleBgTiles::

TitleBgMap::
INCBIN "gfx/title.map.bin"
EndTitleBgMap::


;-----------------------------------------------------------------------------

SECTION "Game Init", ROM0

Start:
     di ;disable interupts while initializing

    ;wait for

   
     
    ; blank A0 bytes in WRAM to use for OAM, that why there 
    ; isnt garbage ram data populated in OAM by default
.blankGarbageData
    ld b, $00;
    ld hl, wOAMBufferStart;
    ld de, wOAMBufferEnd - wOAMBufferStart;
    call memfill;

    ; I am going to do the same near c100 for debug purposes for music playback
    ; ld b, $00;
    ld hl, $C100;
    ld de, $01FF;
    call memfill;


    ; Set Stack pointer to low ram
    ld sp, $e000

    ;Turn sound on
    ld a, %11111111
    ld [rNR52], a  ; master on/off, should ignore all bits other than 7
    ld [rNR50], a  ; set channel volumes to max for L/R channels
    ld [rNR51], a  ; sets all 4 channels on for both L/R

    ;Music params
    xor a
    ld [music_enabled_bool], a
    ld [hMusicChannelDisable], a

    ;move DMA subroutine to HRAM
    call CopyDMARoutine

    ; INITIALIZE TITLE SCREEN STATE
    call INIT_TITLE;

    ; mask all interrupts besides VBLANK for now
    ; the interrupt flags are at FF0F, not sure how to 'handle' these.... right now
    ;Enable interrupts
    ld a, %00000001
    ld [$ffff], a
    ei

MainGameLoop::

    ;; this just writes to make sure we are still running
    ld a, [hTestMain]
    inc a
    ld [hTestMain],a
    
    ;; handle our new inputs , different calls depending on state?
    call handleCurrentInputs
    
    ld a, [hSystemState]
    cp SYSSTATE_TITLE
    jp z, TITLE_LOOP



EndMainGameLoop::;
    rst wait_vblank ; wait for vblank
    jp MainGameLoop ; return to top, should actually never be called if wait_vblank works correctly, I feel safe if its there thou


SECTION "Sprites", ROM0

dummySprite:
INCBIN "gfx/dummy.bin"
dummySpriteEnd:


SECTION "OAMMirrorInit", ROM0
OamMirror::
    db $30, $30, $00, $00  ;y- loc, x - loc, tile #,  flags , 
    db $30, $38, $02, $00  ;y- loc, x - loc, tile #,  flags ,
    db $40, $30, $04, $00  ;y- loc, x - loc, tile #,  flags ,
    db $40, $38, $06, $00  ;y- loc, x - loc, tile #,  flags ,
OamMirrorEnd::



section "InputHandlers", ROM0 [$3000]
handleCurrentInputs::
    ;; this function should be changed/reimplemented??? depending on the state of the game

    ld a, [hJoypadHeld]
    cp %00000000 ;; check for nothing
    ret z

    and %11110000
    cp %00000000 ;; check for nothing
    jr z, .checkButtonPresses

    ;DOWN
    ld a, [hJoypadHeld]
    bit 7, a
    ;call nz, moveSpriteDown

    ;UP
    ld a, [hJoypadHeld]
    bit 6, a
    ;call nz, testSound

    ;LEFT
    ld a, [hJoypadHeld]
    bit 5, a
    ;call nz, moveSpriteLeft

    ;RIGHT
    ld a, [hJoypadHeld]
    bit 4, a
    ;call nz, moveSpriteRight

.checkButtonPresses

    ld a,[hJoypadPressed]
    ;B Button
   ; bit 1, a
   ; call nz, swapWindows

    ret


testSound::
    ld a,[rNR52]
    bit 1, a ; checks sound channel 2
    jp nz, .endTestSound ; let sound finish if started.
    
    ld a, %10110011  ;; duty cycle 50%, max duration (63.. time units?)
    ld [rNR21], a ; into channel 2 (tone)

    ld a, %10111010 ; set envelope, dont envelope
    ld [rNR22], a

    xor a 
    ld [rNR23], a ;; lower 8 bits of frequency. blanking for now, I just want to hear sound first
    ld a, %11000110 ; start playing, counter/consecutive selection?, null x3, freq high bits
    ld [rNR24], a  
.endTestSound  
    ret
